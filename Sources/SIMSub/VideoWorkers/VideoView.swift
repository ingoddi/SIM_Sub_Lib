import SwiftUI
import AVFoundation
import Foundation

/// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
public enum CelestialVideoPriority: Int {
    /// –í–∏–¥–µ–æ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)
    case button = 0
    /// –í–∏–¥–µ–æ —Ñ–æ–Ω–∞ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
    case background = 1
    /// –í–∏–¥–µ–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏–ª–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    case collection = 2

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π QoS –¥–ª—è GCD
    public var qos: DispatchQoS.QoSClass {
        switch self {
        case .button:
            return .userInteractive
        case .background:
            return .userInitiated
        case .collection:
            return .utility
        }
    }
}


public struct CelestialVideoView: UIViewRepresentable {
    private let name: String
    private let cornerRadius: CGFloat
    private let gravity: AVLayerVideoGravity
    private let priority: CelestialVideoPriority

    public init(name: String,
                cornerRadius: CGFloat = 0,
                gravity: AVLayerVideoGravity = .resizeAspectFill,
                priority: CelestialVideoPriority = .background) {
        self.name = name
        self.cornerRadius = cornerRadius
        self.gravity = gravity
        self.priority = priority
    }

    public func makeUIView(context: Context) -> VideoContainerView {
        print("üé¨ makeUIView for video: \(name)")
        let view = VideoContainerView(cornerRadius: cornerRadius)
        view.backgroundColor = .clear
        loadVideo(into: view)
        return view
    }

    public func updateUIView(_ uiView: VideoContainerView, context: Context) {
        print("üîÑ updateUIView for video: \(name)")
        uiView.updateLayout()
    }

    private func loadVideo(into view: VideoContainerView) {
        let block: @Sendable () -> Void = {
            guard let player = CelestialVideoCache.shared.player(for: name) else {
                print("‚ùå No player available for \(name)")
                return
            }
            DispatchQueue.main.async {
                view.setPlayer(player, gravity: gravity)
            }
        }

        if priority == .button {
            print("‚ö° Button priority ‚Üí loading immediately")
            block()
        } else {
            print("‚è≥ Loading with qos: \(priority.qos)")
            DispatchQueue.global(qos: priority.qos).async(execute: block)
        }
    }
}

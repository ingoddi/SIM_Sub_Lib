import AVFoundation

public final class CelestialVideoCache: @unchecked Sendable {
    public static let shared = CelestialVideoCache()

    private var cache: [String: AVPlayerLooper] = [:]
    private var players: [String: AVQueuePlayer] = [:]
    private let lock = NSLock()

    private init() {}

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ (—Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    public func player(for name: String) -> AVQueuePlayer? {
        lock.lock()
        if let player = players[name] {
            print("‚ôªÔ∏è Cache hit for video: \(name)")
            lock.unlock()
            return player
        }
        lock.unlock()

        guard let url = Bundle.main.url(forResource: name, withExtension: "mp4") else {
            print("‚ùå Video not found: \(name).mp4")
            return nil
        }

        print("üìÇ Loading video: \(name)")
        let item = AVPlayerItem(url: url)
        let player = AVQueuePlayer()
        let looper = AVPlayerLooper(player: player, templateItem: item)

        lock.lock()
        players[name] = player
        cache[name] = looper
        lock.unlock()

        // –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É ‚Äî –æ–Ω –≥–æ—Ç–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ª–æ–π –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ
        DispatchQueue.main.async { player.play() }
        return player
    }

    /// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∫—ç—à
    public func clearAll() {
        lock.lock()
        print("üßπ Clearing ALL videos")
        players.removeAll()
        cache.removeAll()
        lock.unlock()
    }

    /// –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
    public func clear(name: String) {
        lock.lock()
        print("üßπ Clearing video: \(name)")
        players.removeValue(forKey: name)
        cache.removeValue(forKey: name)
        lock.unlock()
    }

    /// –ü—Ä–æ–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∑–∞—Ä–∞–Ω–µ–µ (–±–µ–∑ —Å—Ç–∞—Ä—Ç–∞ —Å–ª–æ—è)
    public func preload(name: String) {
        DispatchQueue.global(qos: .utility).async {
            _ = self.player(for: name)
        }
    }
}
